#Tesi

############################################################################
#pacchetti e dati necessari
install.packages("virtualspecies")
install.packages("ranger")
library(raster)
library(sp)
library(virtualspecies)
library(ggplot2)
library(rgeos)
library(rgdal)
library(fuzzySim)
library(ranger) 
worldclim <- getData("worldclim", var = "bio", res = 10)
my.stack <- worldclim[[c(1: 19)]]

############################################################################
#creo due distribuzioni di specie

#specie 1 con metodo random pca
random.sp <- generateRandomSp(my.stack, 
                              approach = "pca",
                              realistic.sp = TRUE,
                              )
random.sp
plotResponse(random.sp)

#specie 2 con dei parametri e funzione definita da me
my.parameters <- formatFunctions(bio1 = c(fun = 'dnorm', mean = 250, sd = 50),
                                 bio12 = c(fun = 'dnorm', mean = 4000, sd = 2000))
new.species <- generateSpFromFun(raster.stack = worldclim[[c("bio1", "bio12")]],
                                 parameters = my.parameters,
                                 formula = "2 * bio1 + bio12",
                                 plot = TRUE)
specie1<-random.sp
specie2<-new.species
plotResponse(random.sp)
plotResponse(new.species)

#ottengo presenze-assenze certe
paspecie1 <- convertToPA(specie1, plot = TRUE)
paspecie2 <- convertToPA(specie2, plot = TRUE)

############################################################################
#modello probabilistico delle presenze

#estraggo coordinate per tutti i pixel 

#specie 1
paspecie1$suitab.raster
tuttixy<-as.data.frame(paspecie1$pa.raster, row.names=NULL, optional=FALSE, xy=TRUE,
              na.rm=FALSE, long=FALSE)
ptstot=data.frame("x" = tuttixy$x, "y"=tuttixy$y)
#estraggo variabili e creo dataframe
bio1atot <- extract(worldclim$bio1, ptstot)
bio12atot<-extract(worldclim$bio12, ptstot)
puntipres1tot=data.frame("val1" = bio1atot, "x"=ptstot$x, "y"=ptstot$y)
puntipres2tot=data.frame("val2" = bio12atot, "x"=ptstot$x, "y"=ptstot$y)
str(paspecie1$pa.raster)
str(tuttixy)
head(paspecie1$pa.raster@data@values)
puntiprestotmondo=data.frame("realipres"=tuttixy$layer, "val2" = bio12atot, "val1"=bio1atot, "x"=ptstot$x, "y"=ptstot$y)
head(puntiprestot)
str(puntiprestotmondo)
puntiprestotmondo[is.na(puntiprestotmondo)] <- 0

#seconda specie
str(paspecie2$details)
paspecie2$suitab.raster
tuttixy2<-as.data.frame(paspecie2$pa.raster, row.names=NULL, optional=FALSE, xy=TRUE,
                       na.rm=FALSE, long=FALSE)
str(paspecie2$pa.raster)
str(tuttixy2)
head(paspecie2$pa.raster@data@values)
puntiprestotmondo2=data.frame("realipres2"=tuttixy2$layer, "val2" = bio12atot, "val1"=bio1atot, "x"=ptstot$x, "y"=ptstot$y)
str(puntiprestotmondo2)
puntiprestotmondo2[is.na(puntiprestotmondo2)] <- 0

#creo modelli

#specie 1
modtot <- with(puntiprestotmondo, glm(puntiprestotmondo$realipres  ~  + puntiprestotmondo$val1 +
                                puntiprestotmondo$val2 ,
                              family = binomial))
#specie 2
modtot2 <- with(puntiprestotmondo2, glm(puntiprestotmondo2$realipres2  ~  + puntiprestotmondo2$val1 +
                                        puntiprestotmondo2$val2 ,
                                      family = binomial))
#calcolo probab 1
prob <- predict(modtot, data = puntiprestotmondo, type = "response")
probdataframe=data.frame("x"=ptstot$x, "y"=ptstot$y, "probab" = prob)
probdataframe$probab[probdataframe$probab == 0.00893805525686379] <- "NA"
mappa1Prob <- rasterFromXYZ(probdataframe)
plot(mappa1Prob)

#calcolo probab 2
prob2 <- predict(modtot2, data = puntiprestotmondo, type = "response")
probdataframe2=data.frame("x"=ptstot$x, "y"=ptstot$y, "probab" = prob2)
probdataframe2$probab[probdataframe2$probab == 0.00451612996380891] <- "NA"
mappa2Prob <- rasterFromXYZ(probdataframe2)
plot(mappa2Prob)

#calcolo correlazione e dev standard
cor(prob,prob2)
window <- matrix(1, nrow = 5, ncol = 5)
sd_strPROB1<- focal(mappa1Prob, w=window, fun=sd)
plot(sd_strPROB1)
sd_strPROB2<- focal(mappa2Prob, w=window, fun=sd)
plot(sd_strPROB2)

###################################################################

#creo modello di suitability con tecnica di Random Forest
#specie 1
VarBiotot <- extract(worldclim, ptstot)
dataRF=data.frame("presenzeV1" = tuttixy$layer, VarBiotot)
dataRF[is.na(dataRF)] <- 0
forestmodel<-ranger(dataRF$presenzeV1 ~., data = dataRF,importance='impurity')
summary(forestmodel)

FM1=data.frame("x"=ptstot$x, "y"=ptstot$y, "fm" = forestmodel$predictions)
FM1$fm[predRF$ predictions == il valore di sfondo] <- "NA"
mappa1FM1 <- rasterFromXYZ(FM1)
plot(mappa1FM1)

#modello 2
dataRF2=data.frame("presenzeV2" = tuttixy2$layer, VarBiotot)
dataRF2[is.na(dataRF2)] <- 0
forestmodel2<-ranger(dataRF2$presenzeV2 ~., data = dataRF2,  num.trees=500, min.node.size=5, mtry=sqrt(5),  importance='impurity')
summary(forestmodel2)

FM2=data.frame("x"=ptstot$x, "y"=ptstot$y, "fm" = forestmodel2$ predictions)
forrestmodel2$ predictions[predRF2$predictions == il valore di sfondo] <- "NA"
mappa2FM2 <- rasterFromXYZ(FM2)
plot(mappa2FM2)

forestmodel$variable.importance
forestmodel2$variable.importance

#correlazione e deviazione standard
cor(forestmodel$predictions,forestmodel2$predictions)
window <- matrix(1, nrow = 5, ncol = 5)
sd_strmappa1FM1<- focal(mappa1FM1, w=window, fun=sd)
plot(sd_strmappa1FM1)
sd_strmappa2FM2<- focal(mappa2FM2, w=window, fun=sd)
plot(sd_strmappa2FM2)


#######################################
#Calcolo Favourability
#Specie 1
modtot <- with(puntiprestotmondo, glm(puntiprestotmondo$realipres  ~  + puntiprestotmondo$val1 +
                                puntiprestotmondo$val2 ,
                              family = binomial))
str(modtot)
Favourabtot<-Fav(model = modtot)
head(Favourabtot)
str(Favourabtot)
#se voglio ho la previsione ma non mi serve (in quanto il modello è ottenuto dalla totalità dei dati e non da un campione
probtot <- predict(modtot, data = puntiprestotmondo, type = "response")
str(probtot)

#creo data frame
favortot=data.frame("x"=ptstot$x, "y"=ptstot$y, "favo" = Favourabtot)
str(favortot)
favortot$favo[favortot$favo == 0.214905949914744] <- "NA"
favortot$favo

#mappa raster favourability
dfr <- rasterFromXYZ(favortot)
plot(dfr)
str(dfr)

#seconda specie
#creo modello
modtot2 <- with(puntiprestotmondo2, glm(puntiprestotmondo2$realipres2  ~  + puntiprestotmondo2$val1 +
                                        puntiprestotmondo2$val2 ,
                                      family = binomial))
str(modtot2)
Favourabtot2<-Fav(model = modtot2)
head(Favourabtot2)
str(Favourabtot2)

favortot2=data.frame("x"=ptstot$x, "y"=ptstot$y, "favo" = Favourabtot2)
str(favortot2$favo)
favortot2$favo[favortot2$favo == 0.0299790476744832] <- "NA"
favortot2$favo

#mappa2 raster favourability
dfr2 <- rasterFromXYZ(favortot2)
plot(dfr2)
h<-(dfr-dfr2)
plot(h)

#st. dev fav 1 e 2
window <- matrix(1, nrow = 5, ncol = 5)
sd_Fav1<- focal(dfr, w=window, fun=sd)
plot(sd_Fav1)
sd_Fav2<- focal(dfr2, w=window, fun=sd)
plot(sd_Fav2)

#calcolo similarity 
simil1e2<-fuzSim(Favourabtot, Favourabtot2, method="Jaccard", na.rm = TRUE)
str(simil1e2)

#calcolo unione
favortotOverlay=data.frame("x"=ptstot$x, "y"=ptstot$y, "favo1" = Favourabtot, "favo2" = Favourabtot2)
provaOverlayunion<-fuzzyOverlay(favortotOverlay, overlay.cols = 3:4, op = "union",
                           na.rm = FALSE, round.digits = 2)
mappaUnion=data.frame("x"=ptstot$x, "y"=ptstot$y, "union" = provaOverlayunion)
mappaUNI <- rasterFromXYZ(mappaUnion)
plot(mappaUNI)


#intersection con Fav
provaOverlayint<-fuzzyOverlay(favortotOverlay, overlay.cols = 3:4, op = "intersection",
                           na.rm = FALSE, round.digits = 2)
provaOverlayint[provaOverlayint == 0.0299790476744832] <- "NA"
mappaInter=data.frame("x"=ptstot$x, "y"=ptstot$y, "int" = provaOverlayint)
mappaINT <- rasterFromXYZ(mappaInter)
plot(mappaINT)
#per capire il pixel da dare NA
click(mappaINT, n=Inf, id=FALSE, xy=FALSE, cell=FALSE, type="n", show=TRUE)
#ma funziona meglio
str(provaOverlayint)

#########################################################################

#RGB FAV, PROB, SUITAB
stackMappespecie1<-stack(dfr,mappa2Prob,mappa1FM1)
plotRGB(stackMappespecie1, r=1, b=2, g=3, stretch="Lin")


######################################################

#provo a calcolare l'intersezione con la probabilità (prob_and)

probtotOverlay=data.frame("x"=ptstot$x, "y"=ptstot$y, "prob1" = mappa1Prob@data@values, "prob2" = mappa2Prob@data@values)
probtotOverlay$prob2[is.na(probtotOverlay$prob2)] <- 0

provaPorbOverlayint<-fuzzyOverlay(probtotOverlay, overlay.cols = 3:4, op = "prob_and",
                           na.rm = FALSE, round.digits = 2)
mappaAndProb=data.frame("x"=ptstot$x, "y"=ptstot$y, "prob_and" = provaPorbOverlayint)
mappaAProb <- rasterFromXYZ(mappaAndProb)
plot(mappaAProb)

#correlazione tra le due mappe
plot(mappaAProb, mappaINT)

#differenza fra due mappe
differIntPROBFAV<-mappaAProb-mappaINT
plot(differIntPROBFAV)

cl<- colorRampPalette(c("darkblue","yellow","red","black"))(100)
cl1<- colorRampPalette(c("darkblue","white","red"))(100)
par(mfrow=c(1,2))
plot(differIntPROBFAV, col=cl1, main="Differenza Intersezione Probability e Favourability")

#vediamo le zone con variabilità superiore
window <- matrix(1, nrow = 5, ncol = 5)
sd_str<- focal(differIntPROBFAV, w=window, fun=sd)
plot(sd_str)

sd_str2<- focal(mappaAProb, w=window, fun=sd)
plot(sd_str2)

sd_str3<- focal(mappaINT, w=window, fun=sd)
plot(sd_str3)

diffSD<-(sd_str2-sd_str3)
plot(diffSD,col=cl1)

#########################################################################
#VARIE
#1)
#modello FAV specie 1, con soli 1000 pt

#estraggo 1000 punti
PA.points <- sampleOccurrences(paspecie1,
                               
                               n =1000 ,
                               type = "presence-absence",
                               detection.probability = 0.5,
                               correct.by.suitability = TRUE,
                               error.probability = 0.3,
                               plot = FALSE)

plot(paspecie1$suitab.raster)
occ <- PA.points$sample.points
points(occ[occ$Observed == 1, c("x", "y")], pch = 16, cex = .8)
pts=data.frame("x" = PA.points$sample.points$x, "y"=PA.points$sample.points$y)

#estraggo valori delle variabili bioclim sui 1000 pt e creo dataframe con coordinate e valori
bio1a <- extract(worldclim$bio1, pts)
bio12a<-extract(worldclim$bio12, pts)
puntipres1=data.frame("val1" = bio1a, "x"=pts$x, "y"=pts$y)
puntipres2=data.frame("val2" = bio12a, "x"=pts$x, "y"=pts$y)
head(puntiprestot)
puntiprestot=data.frame("realipres"=occ$Real, "val2" = bio12a, "val1"=bio1a, "x"=pts$x, "y"=pts$y)
plot(puntipres$x,puntipres$y)


#creo modello per la Favourability
mod <- with(puntiprestot, glm(puntiprestot$realipres  ~  + puntiprestot$val1 +
                       puntiprestot$val2 ,
                     family = binomial))
prova<-Fav(model = mod)
head(prova)
str(prova)
favor=data.frame("favo" = prova, "x"=pts$x, "y"=pts$y)
head(favor)

#2)
#trend surface analysis for one or more species with Favourability (interessante capire se cambia facendola con o senza Fav)
dfpermultTSA=data.frame("realipres1"=tuttixy$layer, "realipres2"=tuttixy2$layer, "x"=ptstot$x, "y"=ptstot$y)
f<-multTSA(dfpermultTSA, sp.cols=1:2, coord.cols=3:4, id.col = NULL, degree = 3,
        step = TRUE, criterion = "AIC", type = "F", Favourability = TRUE,
        suffix = "_TS", save.models = FALSE)
str(f)

mappaF1TSA=data.frame( "x"=ptstot$x, "y"=ptstot$y, "f1TSA"=f$realipres1_TS, "realipres2"=f$realipres2_TS)
mappaTSA <- rasterFromXYZ(mappaF1TSA)
str(mappaTSA)
plot(mappaTSA)

#provo a farla senza fav
f2<-multTSA(dfpermultTSA, sp.cols=1:2, coord.cols=3:4, id.col = NULL, degree = 3,
        step = TRUE, criterion = "AIC", type = "P", 
        suffix = "_TS", save.models = FALSE)
str(f2)

mappaF1TSApres=data.frame( "x"=ptstot$x, "y"=ptstot$y, "f1TSApres"=f2$realipres1_TS)
mappaTSApres <- rasterFromXYZ(mappaF1TSApres)
str(mappaTASpres)
plot(mappaTSApres)

#differenza
diffTSA<-(mappaTSA$f1TSA-mappaTSApres$f1TSApres)

plot(diffTSA)
#non riesco ad interpretarle bene
